// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"io"
	"sync"

	"github.com/docker/docker/client"
	"github.com/ubclaunchpad/inertia/daemon/inertiad/build"
)

type FakeContainerBuilder struct {
	BuildStub        func(string, build.Config, *client.Client, io.Writer) (func() error, error)
	buildMutex       sync.RWMutex
	buildArgsForCall []struct {
		arg1 string
		arg2 build.Config
		arg3 *client.Client
		arg4 io.Writer
	}
	buildReturns struct {
		result1 func() error
		result2 error
	}
	buildReturnsOnCall map[int]struct {
		result1 func() error
		result2 error
	}
	GetBuildStageNameStub        func() string
	getBuildStageNameMutex       sync.RWMutex
	getBuildStageNameArgsForCall []struct {
	}
	getBuildStageNameReturns struct {
		result1 string
	}
	getBuildStageNameReturnsOnCall map[int]struct {
		result1 string
	}
	PruneStub        func(*client.Client, io.Writer) error
	pruneMutex       sync.RWMutex
	pruneArgsForCall []struct {
		arg1 *client.Client
		arg2 io.Writer
	}
	pruneReturns struct {
		result1 error
	}
	pruneReturnsOnCall map[int]struct {
		result1 error
	}
	PruneAllStub        func(*client.Client, io.Writer) error
	pruneAllMutex       sync.RWMutex
	pruneAllArgsForCall []struct {
		arg1 *client.Client
		arg2 io.Writer
	}
	pruneAllReturns struct {
		result1 error
	}
	pruneAllReturnsOnCall map[int]struct {
		result1 error
	}
	StopContainersStub        func(*client.Client, io.Writer) error
	stopContainersMutex       sync.RWMutex
	stopContainersArgsForCall []struct {
		arg1 *client.Client
		arg2 io.Writer
	}
	stopContainersReturns struct {
		result1 error
	}
	stopContainersReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeContainerBuilder) Build(arg1 string, arg2 build.Config, arg3 *client.Client, arg4 io.Writer) (func() error, error) {
	fake.buildMutex.Lock()
	ret, specificReturn := fake.buildReturnsOnCall[len(fake.buildArgsForCall)]
	fake.buildArgsForCall = append(fake.buildArgsForCall, struct {
		arg1 string
		arg2 build.Config
		arg3 *client.Client
		arg4 io.Writer
	}{arg1, arg2, arg3, arg4})
	stub := fake.BuildStub
	fakeReturns := fake.buildReturns
	fake.recordInvocation("Build", []interface{}{arg1, arg2, arg3, arg4})
	fake.buildMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeContainerBuilder) BuildCallCount() int {
	fake.buildMutex.RLock()
	defer fake.buildMutex.RUnlock()
	return len(fake.buildArgsForCall)
}

func (fake *FakeContainerBuilder) BuildCalls(stub func(string, build.Config, *client.Client, io.Writer) (func() error, error)) {
	fake.buildMutex.Lock()
	defer fake.buildMutex.Unlock()
	fake.BuildStub = stub
}

func (fake *FakeContainerBuilder) BuildArgsForCall(i int) (string, build.Config, *client.Client, io.Writer) {
	fake.buildMutex.RLock()
	defer fake.buildMutex.RUnlock()
	argsForCall := fake.buildArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeContainerBuilder) BuildReturns(result1 func() error, result2 error) {
	fake.buildMutex.Lock()
	defer fake.buildMutex.Unlock()
	fake.BuildStub = nil
	fake.buildReturns = struct {
		result1 func() error
		result2 error
	}{result1, result2}
}

func (fake *FakeContainerBuilder) BuildReturnsOnCall(i int, result1 func() error, result2 error) {
	fake.buildMutex.Lock()
	defer fake.buildMutex.Unlock()
	fake.BuildStub = nil
	if fake.buildReturnsOnCall == nil {
		fake.buildReturnsOnCall = make(map[int]struct {
			result1 func() error
			result2 error
		})
	}
	fake.buildReturnsOnCall[i] = struct {
		result1 func() error
		result2 error
	}{result1, result2}
}

func (fake *FakeContainerBuilder) GetBuildStageName() string {
	fake.getBuildStageNameMutex.Lock()
	ret, specificReturn := fake.getBuildStageNameReturnsOnCall[len(fake.getBuildStageNameArgsForCall)]
	fake.getBuildStageNameArgsForCall = append(fake.getBuildStageNameArgsForCall, struct {
	}{})
	stub := fake.GetBuildStageNameStub
	fakeReturns := fake.getBuildStageNameReturns
	fake.recordInvocation("GetBuildStageName", []interface{}{})
	fake.getBuildStageNameMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeContainerBuilder) GetBuildStageNameCallCount() int {
	fake.getBuildStageNameMutex.RLock()
	defer fake.getBuildStageNameMutex.RUnlock()
	return len(fake.getBuildStageNameArgsForCall)
}

func (fake *FakeContainerBuilder) GetBuildStageNameCalls(stub func() string) {
	fake.getBuildStageNameMutex.Lock()
	defer fake.getBuildStageNameMutex.Unlock()
	fake.GetBuildStageNameStub = stub
}

func (fake *FakeContainerBuilder) GetBuildStageNameReturns(result1 string) {
	fake.getBuildStageNameMutex.Lock()
	defer fake.getBuildStageNameMutex.Unlock()
	fake.GetBuildStageNameStub = nil
	fake.getBuildStageNameReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeContainerBuilder) GetBuildStageNameReturnsOnCall(i int, result1 string) {
	fake.getBuildStageNameMutex.Lock()
	defer fake.getBuildStageNameMutex.Unlock()
	fake.GetBuildStageNameStub = nil
	if fake.getBuildStageNameReturnsOnCall == nil {
		fake.getBuildStageNameReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getBuildStageNameReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeContainerBuilder) Prune(arg1 *client.Client, arg2 io.Writer) error {
	fake.pruneMutex.Lock()
	ret, specificReturn := fake.pruneReturnsOnCall[len(fake.pruneArgsForCall)]
	fake.pruneArgsForCall = append(fake.pruneArgsForCall, struct {
		arg1 *client.Client
		arg2 io.Writer
	}{arg1, arg2})
	stub := fake.PruneStub
	fakeReturns := fake.pruneReturns
	fake.recordInvocation("Prune", []interface{}{arg1, arg2})
	fake.pruneMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeContainerBuilder) PruneCallCount() int {
	fake.pruneMutex.RLock()
	defer fake.pruneMutex.RUnlock()
	return len(fake.pruneArgsForCall)
}

func (fake *FakeContainerBuilder) PruneCalls(stub func(*client.Client, io.Writer) error) {
	fake.pruneMutex.Lock()
	defer fake.pruneMutex.Unlock()
	fake.PruneStub = stub
}

func (fake *FakeContainerBuilder) PruneArgsForCall(i int) (*client.Client, io.Writer) {
	fake.pruneMutex.RLock()
	defer fake.pruneMutex.RUnlock()
	argsForCall := fake.pruneArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeContainerBuilder) PruneReturns(result1 error) {
	fake.pruneMutex.Lock()
	defer fake.pruneMutex.Unlock()
	fake.PruneStub = nil
	fake.pruneReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeContainerBuilder) PruneReturnsOnCall(i int, result1 error) {
	fake.pruneMutex.Lock()
	defer fake.pruneMutex.Unlock()
	fake.PruneStub = nil
	if fake.pruneReturnsOnCall == nil {
		fake.pruneReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.pruneReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeContainerBuilder) PruneAll(arg1 *client.Client, arg2 io.Writer) error {
	fake.pruneAllMutex.Lock()
	ret, specificReturn := fake.pruneAllReturnsOnCall[len(fake.pruneAllArgsForCall)]
	fake.pruneAllArgsForCall = append(fake.pruneAllArgsForCall, struct {
		arg1 *client.Client
		arg2 io.Writer
	}{arg1, arg2})
	stub := fake.PruneAllStub
	fakeReturns := fake.pruneAllReturns
	fake.recordInvocation("PruneAll", []interface{}{arg1, arg2})
	fake.pruneAllMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeContainerBuilder) PruneAllCallCount() int {
	fake.pruneAllMutex.RLock()
	defer fake.pruneAllMutex.RUnlock()
	return len(fake.pruneAllArgsForCall)
}

func (fake *FakeContainerBuilder) PruneAllCalls(stub func(*client.Client, io.Writer) error) {
	fake.pruneAllMutex.Lock()
	defer fake.pruneAllMutex.Unlock()
	fake.PruneAllStub = stub
}

func (fake *FakeContainerBuilder) PruneAllArgsForCall(i int) (*client.Client, io.Writer) {
	fake.pruneAllMutex.RLock()
	defer fake.pruneAllMutex.RUnlock()
	argsForCall := fake.pruneAllArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeContainerBuilder) PruneAllReturns(result1 error) {
	fake.pruneAllMutex.Lock()
	defer fake.pruneAllMutex.Unlock()
	fake.PruneAllStub = nil
	fake.pruneAllReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeContainerBuilder) PruneAllReturnsOnCall(i int, result1 error) {
	fake.pruneAllMutex.Lock()
	defer fake.pruneAllMutex.Unlock()
	fake.PruneAllStub = nil
	if fake.pruneAllReturnsOnCall == nil {
		fake.pruneAllReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.pruneAllReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeContainerBuilder) StopContainers(arg1 *client.Client, arg2 io.Writer) error {
	fake.stopContainersMutex.Lock()
	ret, specificReturn := fake.stopContainersReturnsOnCall[len(fake.stopContainersArgsForCall)]
	fake.stopContainersArgsForCall = append(fake.stopContainersArgsForCall, struct {
		arg1 *client.Client
		arg2 io.Writer
	}{arg1, arg2})
	stub := fake.StopContainersStub
	fakeReturns := fake.stopContainersReturns
	fake.recordInvocation("StopContainers", []interface{}{arg1, arg2})
	fake.stopContainersMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeContainerBuilder) StopContainersCallCount() int {
	fake.stopContainersMutex.RLock()
	defer fake.stopContainersMutex.RUnlock()
	return len(fake.stopContainersArgsForCall)
}

func (fake *FakeContainerBuilder) StopContainersCalls(stub func(*client.Client, io.Writer) error) {
	fake.stopContainersMutex.Lock()
	defer fake.stopContainersMutex.Unlock()
	fake.StopContainersStub = stub
}

func (fake *FakeContainerBuilder) StopContainersArgsForCall(i int) (*client.Client, io.Writer) {
	fake.stopContainersMutex.RLock()
	defer fake.stopContainersMutex.RUnlock()
	argsForCall := fake.stopContainersArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeContainerBuilder) StopContainersReturns(result1 error) {
	fake.stopContainersMutex.Lock()
	defer fake.stopContainersMutex.Unlock()
	fake.StopContainersStub = nil
	fake.stopContainersReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeContainerBuilder) StopContainersReturnsOnCall(i int, result1 error) {
	fake.stopContainersMutex.Lock()
	defer fake.stopContainersMutex.Unlock()
	fake.StopContainersStub = nil
	if fake.stopContainersReturnsOnCall == nil {
		fake.stopContainersReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.stopContainersReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeContainerBuilder) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.buildMutex.RLock()
	defer fake.buildMutex.RUnlock()
	fake.getBuildStageNameMutex.RLock()
	defer fake.getBuildStageNameMutex.RUnlock()
	fake.pruneMutex.RLock()
	defer fake.pruneMutex.RUnlock()
	fake.pruneAllMutex.RLock()
	defer fake.pruneAllMutex.RUnlock()
	fake.stopContainersMutex.RLock()
	defer fake.stopContainersMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeContainerBuilder) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ build.ContainerBuilder = new(FakeContainerBuilder)
