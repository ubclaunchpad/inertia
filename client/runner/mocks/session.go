// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"bytes"
	"io"
	"sync"

	"github.com/ubclaunchpad/inertia/client/runner"
)

type FakeSSHSession struct {
	CopyFileStub        func(io.Reader, string, string) error
	copyFileMutex       sync.RWMutex
	copyFileArgsForCall []struct {
		arg1 io.Reader
		arg2 string
		arg3 string
	}
	copyFileReturns struct {
		result1 error
	}
	copyFileReturnsOnCall map[int]struct {
		result1 error
	}
	RunStub        func(string) (*bytes.Buffer, *bytes.Buffer, error)
	runMutex       sync.RWMutex
	runArgsForCall []struct {
		arg1 string
	}
	runReturns struct {
		result1 *bytes.Buffer
		result2 *bytes.Buffer
		result3 error
	}
	runReturnsOnCall map[int]struct {
		result1 *bytes.Buffer
		result2 *bytes.Buffer
		result3 error
	}
	RunSessionStub        func(...string) error
	runSessionMutex       sync.RWMutex
	runSessionArgsForCall []struct {
		arg1 []string
	}
	runSessionReturns struct {
		result1 error
	}
	runSessionReturnsOnCall map[int]struct {
		result1 error
	}
	RunStreamStub        func(string, bool) error
	runStreamMutex       sync.RWMutex
	runStreamArgsForCall []struct {
		arg1 string
		arg2 bool
	}
	runStreamReturns struct {
		result1 error
	}
	runStreamReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSSHSession) CopyFile(arg1 io.Reader, arg2 string, arg3 string) error {
	fake.copyFileMutex.Lock()
	ret, specificReturn := fake.copyFileReturnsOnCall[len(fake.copyFileArgsForCall)]
	fake.copyFileArgsForCall = append(fake.copyFileArgsForCall, struct {
		arg1 io.Reader
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.CopyFileStub
	fakeReturns := fake.copyFileReturns
	fake.recordInvocation("CopyFile", []interface{}{arg1, arg2, arg3})
	fake.copyFileMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSHSession) CopyFileCallCount() int {
	fake.copyFileMutex.RLock()
	defer fake.copyFileMutex.RUnlock()
	return len(fake.copyFileArgsForCall)
}

func (fake *FakeSSHSession) CopyFileCalls(stub func(io.Reader, string, string) error) {
	fake.copyFileMutex.Lock()
	defer fake.copyFileMutex.Unlock()
	fake.CopyFileStub = stub
}

func (fake *FakeSSHSession) CopyFileArgsForCall(i int) (io.Reader, string, string) {
	fake.copyFileMutex.RLock()
	defer fake.copyFileMutex.RUnlock()
	argsForCall := fake.copyFileArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSHSession) CopyFileReturns(result1 error) {
	fake.copyFileMutex.Lock()
	defer fake.copyFileMutex.Unlock()
	fake.CopyFileStub = nil
	fake.copyFileReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSHSession) CopyFileReturnsOnCall(i int, result1 error) {
	fake.copyFileMutex.Lock()
	defer fake.copyFileMutex.Unlock()
	fake.CopyFileStub = nil
	if fake.copyFileReturnsOnCall == nil {
		fake.copyFileReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.copyFileReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSHSession) Run(arg1 string) (*bytes.Buffer, *bytes.Buffer, error) {
	fake.runMutex.Lock()
	ret, specificReturn := fake.runReturnsOnCall[len(fake.runArgsForCall)]
	fake.runArgsForCall = append(fake.runArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.RunStub
	fakeReturns := fake.runReturns
	fake.recordInvocation("Run", []interface{}{arg1})
	fake.runMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeSSHSession) RunCallCount() int {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	return len(fake.runArgsForCall)
}

func (fake *FakeSSHSession) RunCalls(stub func(string) (*bytes.Buffer, *bytes.Buffer, error)) {
	fake.runMutex.Lock()
	defer fake.runMutex.Unlock()
	fake.RunStub = stub
}

func (fake *FakeSSHSession) RunArgsForCall(i int) string {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	argsForCall := fake.runArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSHSession) RunReturns(result1 *bytes.Buffer, result2 *bytes.Buffer, result3 error) {
	fake.runMutex.Lock()
	defer fake.runMutex.Unlock()
	fake.RunStub = nil
	fake.runReturns = struct {
		result1 *bytes.Buffer
		result2 *bytes.Buffer
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeSSHSession) RunReturnsOnCall(i int, result1 *bytes.Buffer, result2 *bytes.Buffer, result3 error) {
	fake.runMutex.Lock()
	defer fake.runMutex.Unlock()
	fake.RunStub = nil
	if fake.runReturnsOnCall == nil {
		fake.runReturnsOnCall = make(map[int]struct {
			result1 *bytes.Buffer
			result2 *bytes.Buffer
			result3 error
		})
	}
	fake.runReturnsOnCall[i] = struct {
		result1 *bytes.Buffer
		result2 *bytes.Buffer
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeSSHSession) RunSession(arg1 ...string) error {
	fake.runSessionMutex.Lock()
	ret, specificReturn := fake.runSessionReturnsOnCall[len(fake.runSessionArgsForCall)]
	fake.runSessionArgsForCall = append(fake.runSessionArgsForCall, struct {
		arg1 []string
	}{arg1})
	stub := fake.RunSessionStub
	fakeReturns := fake.runSessionReturns
	fake.recordInvocation("RunSession", []interface{}{arg1})
	fake.runSessionMutex.Unlock()
	if stub != nil {
		return stub(arg1...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSHSession) RunSessionCallCount() int {
	fake.runSessionMutex.RLock()
	defer fake.runSessionMutex.RUnlock()
	return len(fake.runSessionArgsForCall)
}

func (fake *FakeSSHSession) RunSessionCalls(stub func(...string) error) {
	fake.runSessionMutex.Lock()
	defer fake.runSessionMutex.Unlock()
	fake.RunSessionStub = stub
}

func (fake *FakeSSHSession) RunSessionArgsForCall(i int) []string {
	fake.runSessionMutex.RLock()
	defer fake.runSessionMutex.RUnlock()
	argsForCall := fake.runSessionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSHSession) RunSessionReturns(result1 error) {
	fake.runSessionMutex.Lock()
	defer fake.runSessionMutex.Unlock()
	fake.RunSessionStub = nil
	fake.runSessionReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSHSession) RunSessionReturnsOnCall(i int, result1 error) {
	fake.runSessionMutex.Lock()
	defer fake.runSessionMutex.Unlock()
	fake.RunSessionStub = nil
	if fake.runSessionReturnsOnCall == nil {
		fake.runSessionReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.runSessionReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSHSession) RunStream(arg1 string, arg2 bool) error {
	fake.runStreamMutex.Lock()
	ret, specificReturn := fake.runStreamReturnsOnCall[len(fake.runStreamArgsForCall)]
	fake.runStreamArgsForCall = append(fake.runStreamArgsForCall, struct {
		arg1 string
		arg2 bool
	}{arg1, arg2})
	stub := fake.RunStreamStub
	fakeReturns := fake.runStreamReturns
	fake.recordInvocation("RunStream", []interface{}{arg1, arg2})
	fake.runStreamMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSHSession) RunStreamCallCount() int {
	fake.runStreamMutex.RLock()
	defer fake.runStreamMutex.RUnlock()
	return len(fake.runStreamArgsForCall)
}

func (fake *FakeSSHSession) RunStreamCalls(stub func(string, bool) error) {
	fake.runStreamMutex.Lock()
	defer fake.runStreamMutex.Unlock()
	fake.RunStreamStub = stub
}

func (fake *FakeSSHSession) RunStreamArgsForCall(i int) (string, bool) {
	fake.runStreamMutex.RLock()
	defer fake.runStreamMutex.RUnlock()
	argsForCall := fake.runStreamArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSSHSession) RunStreamReturns(result1 error) {
	fake.runStreamMutex.Lock()
	defer fake.runStreamMutex.Unlock()
	fake.RunStreamStub = nil
	fake.runStreamReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSHSession) RunStreamReturnsOnCall(i int, result1 error) {
	fake.runStreamMutex.Lock()
	defer fake.runStreamMutex.Unlock()
	fake.RunStreamStub = nil
	if fake.runStreamReturnsOnCall == nil {
		fake.runStreamReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.runStreamReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSHSession) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.copyFileMutex.RLock()
	defer fake.copyFileMutex.RUnlock()
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	fake.runSessionMutex.RLock()
	defer fake.runSessionMutex.RUnlock()
	fake.runStreamMutex.RLock()
	defer fake.runStreamMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSSHSession) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ runner.SSHSession = new(FakeSSHSession)
