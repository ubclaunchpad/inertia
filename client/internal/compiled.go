// Code generated by go-bindata.
// sources:
// client/scripts/daemon-down.sh
// client/scripts/daemon-up.sh
// client/scripts/docker.sh
// client/scripts/keygen.sh
// client/scripts/token.sh
// DO NOT EDIT!

package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _clientScriptsDaemonDownSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xce\xb1\x6e\xc2\x30\x10\xc6\xf1\xfd\x9e\xe2\x2b\xb0\x1a\x9e\x20\x43\x2a\x22\x54\xa9\xb8\x12\x52\x87\x4e\x60\xe2\x73\x38\xd1\x9c\xa9\x7d\xa8\xaf\x5f\x45\x74\x88\xd8\x6e\xf8\xdf\x4f\xdf\xf2\x65\x73\x16\xdd\xd4\x0b\xd1\x12\xaf\xa1\x4a\x8f\xda\x17\xb9\x19\x52\x2e\x38\x17\xd1\x41\x74\x40\xcc\xbf\x0a\xbb\x30\x62\xe0\x31\xeb\x9a\xa8\xb2\xc1\x31\xd1\xb6\xed\xf6\x1f\xfe\xe8\xdb\x7d\xd7\x88\x72\x31\x09\xee\x11\x4d\xe2\x8e\xed\xff\x05\x7d\x56\x0b\x53\x81\xa0\x11\x16\xae\x0c\xb1\x07\x2c\x69\x3a\xa5\xa2\xdc\x55\x45\x87\x35\xb5\xef\x87\xae\xdd\x7e\x1d\x0f\x9f\xde\xbf\xf9\x5d\x73\xaa\xf7\x98\x11\x73\x7f\xe5\x82\x5b\x85\xfb\x81\x73\x49\xbe\x8d\x0b\x16\x1a\x46\x6e\x56\xb3\x21\x8b\x13\xcd\xfb\x32\xc2\x25\xac\x9e\x4c\xfa\x0b\x00\x00\xff\xff\x62\xed\x0f\x4a\xfb\x00\x00\x00")

func clientScriptsDaemonDownShBytes() ([]byte, error) {
	return bindataRead(
		_clientScriptsDaemonDownSh,
		"client/scripts/daemon-down.sh",
	)
}

func clientScriptsDaemonDownSh() (*asset, error) {
	bytes, err := clientScriptsDaemonDownShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "client/scripts/daemon-down.sh", size: 251, mode: os.FileMode(420), modTime: time.Unix(1528351521, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clientScriptsDaemonUpSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x55\xdd\x6e\xe3\x36\x13\xbd\xe7\x53\x4c\x64\xe7\xcb\x57\xa0\xb2\xba\x9b\x5e\x79\xa1\x05\xdc\x8d\xb0\x09\x9a\xd8\x81\x9d\x6d\x51\xa4\x81\x97\x16\xc7\x16\x6b\x89\xd4\x72\x46\x71\xdb\xa7\x2f\x48\xc9\x96\xf3\xd7\x5e\x39\xe1\xfc\xf0\xcc\xe1\x99\xa3\xc1\x49\xb2\xd2\x26\xa1\x42\x88\x01\xfc\x24\x49\xe7\x40\xb9\xd3\x35\xc3\xda\x3a\x20\x64\xd6\x66\x03\x4d\x0d\x57\x06\x1d\x6b\x09\x0e\xbf\x35\xda\x61\x85\x86\x09\xfe\xaf\xb4\xc3\x9c\xad\xd3\x48\xdf\x03\x72\xfe\x9d\x18\x80\x34\x0a\x56\x4e\x1b\x5f\xc8\x05\x82\x92\x58\x59\x03\xd6\x94\xda\xe0\x48\x08\x42\x86\x18\xfd\x7d\x5f\x08\x1d\x48\xb7\x69\x42\xb7\x91\xb8\x98\x64\x37\xb3\xe9\x72\x9e\x5d\x67\x93\x45\x96\x9e\xde\xbf\x7b\xa0\xfd\xe1\xed\x6c\x7e\x97\x9e\xde\xbf\x7f\x20\x71\x39\x5b\xdc\x2d\x27\x17\x17\xf3\x6c\xb1\x48\x4f\xef\xcf\x1f\xc8\x37\xdb\x03\xd4\x95\xdc\x20\x28\x64\xa9\xcb\xbe\xe7\x74\x72\x93\xa5\xba\x4d\x89\x5b\x44\xe2\xea\x66\xf2\x39\x4b\x9b\x55\x5e\xca\xc6\xe4\x45\x2d\x55\xd2\x65\x8c\x87\x4f\xa1\x84\xfe\x0c\xca\x22\x99\x33\x86\x4a\x32\xa3\x83\x5d\x21\x19\x6a\xeb\xf8\x78\x4c\xd7\x18\x02\x6b\x40\x9b\x70\x9a\x5b\xc3\xd2\x77\xf5\xc4\x10\x94\xd6\x6c\xfc\xaf\x66\xd0\x04\x95\xac\x6b\x54\xc0\xb6\x4b\x75\x9e\x4c\x38\x1a\x78\x24\x3e\xcd\xa6\x77\x93\xab\x69\x36\x6f\x09\xf8\xf1\xfc\x87\xf3\x03\x73\xb5\xb3\x7f\x60\xce\xa2\xda\x2a\xed\x20\xae\x61\x78\x39\xbb\xc9\xf6\x33\xbc\x71\x9c\xec\xab\x8e\x28\x53\x92\xdf\x4c\x0f\x31\x31\x80\x4f\xd6\xac\xf5\xa6\x71\x92\xb5\x35\x6f\x25\xe7\x21\xe9\xdf\xa3\x09\x51\x19\x1a\x16\x98\x6f\x41\xaf\x41\x96\x0e\xa5\xfa\xcb\x33\x17\x34\xe3\xf5\xc3\x72\x8b\xa0\xec\xce\x00\xfe\xa9\x29\x68\xb0\xe5\x77\x24\x26\xd7\xf3\x6c\x72\xf1\xdb\x72\xfe\x65\x3a\xbd\x9a\x7e\x4e\xbf\x52\xa3\x2c\x28\x9b\x6f\x3d\x25\x04\xf1\x37\x88\xe3\xb5\x2e\xfd\x0b\x45\x46\x56\x98\x0e\x8f\x34\x10\x7d\x15\x7a\x0d\xf7\x70\x02\xf1\xdf\x10\x0d\x9f\x35\x8b\xe0\xe1\x83\x7f\x0b\x23\x00\x00\x30\x2f\x2c\x44\xb7\x4d\xbb\x03\x07\x20\x3d\x6b\xe1\xc1\xd9\x02\x95\x88\x75\x14\x6a\x8e\xc1\xb8\x0a\xe2\x35\x3c\xbf\x03\x3e\x42\xa2\xf0\x31\x31\x4d\x59\xc2\xfb\x8f\xff\x7b\x27\xd6\xfa\x83\x68\x51\x45\xcf\x74\x17\xc1\x49\x0a\x11\x23\xf1\x53\x64\x03\xb8\xb0\x3b\x53\x5a\xa9\xc2\x3e\x22\x31\xaa\x3d\x9e\xa0\xff\xd1\xd1\x00\xfb\x54\x8f\x7d\x18\x34\xff\x12\x6a\xed\xc1\xb4\xc1\x97\xf8\xb0\x24\xec\xae\xbd\xf6\x57\x7a\x3c\xb0\x6a\x74\xa9\x80\xfd\x0a\x50\x61\x9b\x52\x41\x21\x1f\x11\x56\x88\x06\x28\xaf\xcf\x14\x68\xc3\xb6\x2b\xf3\xf2\xfe\xe5\x76\x01\x92\x21\x69\x61\xc6\x2f\x60\x5e\xff\x07\xc4\x30\x6d\xac\x9f\x36\x78\x8d\x4c\x2f\xae\x79\x63\xfa\xd5\x83\x9d\xe6\x02\x64\x9e\x23\xd1\x7e\xd9\x0a\x4b\xbc\xef\x4c\xfe\x87\x83\xee\xc4\x00\x1c\x96\xf8\x28\x0d\x77\x29\xbd\xc1\xf9\x52\x59\x96\x76\x17\xac\xb1\xef\xee\xff\x72\xb6\x1c\x89\x01\x2c\x10\x43\x77\xff\xe0\x37\x59\xc8\xab\xac\x3b\xb8\x91\xf7\x85\xc2\xee\x80\x0b\x4d\xb0\xb3\x6e\x4b\x63\x31\x80\x82\xb9\xa6\x71\x92\x6c\x34\x17\xcd\x6a\x94\xdb\x2a\x79\xcd\x93\x06\x85\xdd\xc5\x9a\xe3\x50\x27\x5a\xce\xe6\xdd\xca\x1c\x2c\xb6\xb5\xa3\xe1\x91\x85\x44\xe2\x89\x24\x1b\x03\xb1\x82\xdf\x03\xbb\x71\xec\x90\x58\x3a\x86\xc6\x94\x48\x14\x13\xdb\x60\x48\x5d\xb8\xee\xf5\x18\x3a\x8d\xa3\xe1\x53\x3b\x8a\xf6\x99\x8f\x90\x3c\x4a\x97\xb8\xc6\x24\xed\x45\x23\xcf\xe9\xf8\xb5\xc3\xbe\x24\x0a\xee\x10\x8d\x13\x59\xd7\x49\x20\xbb\x0b\x21\xf8\x40\xda\xc5\xfb\xd3\xc5\xe2\x72\xf9\xf3\x74\xf6\xeb\x74\xe9\xbf\x00\x8b\xf4\xec\x50\x99\x8c\x88\x8a\x64\x6b\xec\xce\x2c\xfd\xff\x74\x76\x18\xd1\x3b\x40\x3f\x47\xb0\x80\x2e\x16\x75\x4a\x0b\x40\xfa\x2f\x4a\xf4\x52\x53\xff\x04\x00\x00\xff\xff\x10\x03\x93\xe5\x25\x07\x00\x00")

func clientScriptsDaemonUpShBytes() ([]byte, error) {
	return bindataRead(
		_clientScriptsDaemonUpSh,
		"client/scripts/daemon-up.sh",
	)
}

func clientScriptsDaemonUpSh() (*asset, error) {
	bytes, err := clientScriptsDaemonUpShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "client/scripts/daemon-up.sh", size: 1829, mode: os.FileMode(493), modTime: time.Unix(1529544404, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clientScriptsDockerSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x94\x51\x4f\xdc\x38\x10\xc7\xdf\xfd\x29\x06\x76\x05\x77\xd2\x39\x39\x78\x3c\xc4\x49\x14\xf6\xa9\x48\x54\x2c\xa8\x8f\x95\x89\x27\x89\x85\x63\x07\xcf\x18\xba\xad\xfa\xdd\x2b\x7b\x13\xb3\xdb\xaa\x2d\x7e\xda\x1d\xff\x67\xfc\xf7\x6f\xc6\x59\x1c\xd4\x0f\xc6\xd5\xd4\x0b\xb1\x80\x77\xde\x33\x71\x50\x23\x81\x82\x41\x35\xbd\x71\x08\xad\x0f\xa0\x7d\xf3\x88\xa1\x12\x82\x90\x41\xa2\x10\x57\x37\x97\xef\x57\xb7\x9f\xd6\x37\xf7\xb7\x97\xab\xf3\x0e\xb9\x9a\x24\x8d\x1f\xe6\xcd\xab\xd5\xfa\xee\xfc\xb8\xe6\x61\xac\x3b\x64\x39\x09\xa8\x3f\x16\x82\x58\x05\xbe\xca\x01\xfd\xd7\xdf\xf0\x55\x00\x00\x2c\x60\x9d\xc2\xd3\x61\x1a\x4c\x0b\x86\xc1\x10\x38\xcf\xe0\x9d\x35\x0e\xb3\xce\xb4\x70\x00\x14\xb5\x9f\x94\x40\xac\x98\x40\x4a\xe7\x25\x71\x40\x35\xc0\x19\x70\x8f\x2e\xab\xd3\xca\x62\xc2\xf0\x6c\x1a\xdc\x49\x0a\x5c\x14\x0b\xf8\xe0\xad\x85\xe8\xd8\xd8\x57\x03\x04\x21\x3a\x67\x5c\x57\x74\x2f\xbd\xb1\xf8\x86\xe3\xb5\x2f\x29\x69\x61\xd3\x7b\x38\xfc\xa8\x0c\x1b\xd7\xed\x10\xd5\xc0\x1e\xac\x8a\xae\xe9\xab\xaa\x3a\xdc\xcb\x21\x8b\x38\xc2\x49\x89\x69\x3f\xdd\xbf\x35\xe2\x5b\xea\xd6\xfa\xd1\x8c\x60\x1c\xb1\xb2\x56\xb1\xf1\x2e\x91\xd9\x42\x4d\xd6\x95\x0d\xa8\xf4\x66\x56\xa0\xae\x84\x69\xa1\x57\xd4\xcf\xc6\x4f\xff\xaf\x35\x3e\xd7\x2e\x5a\xbb\x03\x6c\xb7\x37\x39\x80\x9f\x0d\xc3\xbf\xa2\x35\x67\x42\xb4\xc8\x4d\xdf\x1a\x8b\x3b\x5d\xbb\x08\x1d\xfd\x37\xfd\x06\x58\x9e\x00\xf9\x18\x1a\x84\xfb\xdb\xeb\xd7\xe8\x29\x68\x24\x36\x6e\x6b\x34\x55\xa8\xe6\x66\x66\x4b\x4d\x0c\xf6\x17\x86\x4a\x07\xb3\x46\xb6\xb4\xbe\x4e\xa7\x48\x0f\x87\xcb\xd3\x2d\x33\xb4\x73\x9d\x97\x0e\xf9\x4f\x75\xb2\x46\xde\xe4\x74\x58\x9e\x4c\x15\x08\x8b\x2a\x20\xc7\xe0\x26\xf6\xe9\xde\x99\xf7\xc5\xa0\xbe\x78\x07\xab\xcb\xf5\x96\xa9\x6b\x90\x20\xe0\x53\x34\x01\xa1\x89\xc4\x7e\x98\x61\x27\xd2\x5d\xc0\x11\xe4\xd3\x9c\x56\x23\x37\x35\x6d\x88\x71\x90\x01\x2d\x2a\xc2\x5d\xe8\xc9\xd7\x26\x96\x02\x20\x37\x53\x97\x44\x71\xb6\x80\xbb\xb0\x49\x03\xa3\xfd\x8b\xb3\x5e\x69\x88\x94\xc6\x29\x63\xf1\x21\x5f\xeb\x9f\x49\xf9\x80\xad\x0f\x08\x01\xc9\x87\x3c\x73\xec\xe7\xd2\x73\x4a\xe1\x5f\x7a\x0a\xcb\xbd\x67\x5d\xfe\xa6\x87\xfc\x23\xc7\x7e\x6f\xf7\x67\x84\x6a\x64\x99\x30\xc7\x51\x2b\x46\x38\x3a\x2a\x11\x59\x46\x32\xdb\x28\x19\x6f\xb2\xf1\x5b\x03\xad\x11\xad\xd9\xff\xb8\x88\xef\x01\x00\x00\xff\xff\x51\x36\xb6\x09\xe0\x04\x00\x00")

func clientScriptsDockerShBytes() ([]byte, error) {
	return bindataRead(
		_clientScriptsDockerSh,
		"client/scripts/docker.sh",
	)
}

func clientScriptsDockerSh() (*asset, error) {
	bytes, err := clientScriptsDockerShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "client/scripts/docker.sh", size: 1248, mode: os.FileMode(493), modTime: time.Unix(1530157968, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clientScriptsKeygenSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x91\x41\x6b\xdc\x30\x10\x46\xef\xf3\x2b\xbe\xb0\x81\x5c\x2a\xef\xbd\xa1\x0b\x6d\x13\xda\x3d\x74\x13\x68\x7a\x2a\xc5\x68\xad\x71\x34\xd8\x91\x8c\x66\xdc\xad\x2f\xfd\xed\xc5\xeb\xa5\x24\x64\x2f\xd1\x55\x6f\x78\x4f\x9a\xd5\xc5\x7a\x2f\x69\xad\x91\x68\x85\xfb\x92\xc3\xd8\xb0\xc2\x63\x18\xf7\xbd\x34\x6e\x28\xf2\xdb\x1b\xa3\xe3\xc9\x0d\x5e\x0a\x7c\x0a\xc8\xa3\x0d\xa3\x29\x2c\xf2\x89\x9b\xef\x2b\x22\x65\x83\x63\xa2\xed\x4d\x7d\x73\xfb\xfd\x61\xbb\xfb\xf8\xb0\xbd\xdb\x7d\xb8\xfc\x7a\xf7\xed\x76\x5d\xa9\xc6\xb5\x84\xba\xa8\xaf\x25\x71\x31\xf1\x75\xe0\xa1\xcf\x13\xdd\xff\xf8\x54\xbf\x71\xa6\x1a\xc6\xfd\x9c\xfc\x39\x72\xd3\x41\x5a\x04\x56\x93\xe4\x4d\x72\x42\x2b\x3d\xc3\xf7\x85\x7d\x98\xc0\x7f\x44\x4d\xdf\x93\xb4\xf8\x09\xd7\xe2\xf2\xa5\x09\xbf\xae\xe7\x87\x24\x02\x80\x23\x73\x71\xa4\x5e\x37\xbd\x20\xe7\xb3\xc2\xb6\x7d\xf6\x01\x08\x99\x35\xd9\x22\x7c\x87\x27\xdf\x31\xc4\xaa\xff\xb8\x6a\x74\x1d\x4f\x8f\x9c\xe0\xa6\x73\x25\x9b\x73\xd6\xe3\x78\x2b\xd7\xc4\xbd\x32\x2d\xda\x2f\x9c\xb8\x9c\xd6\x82\x83\x58\x44\xca\x18\xbc\xea\x21\x97\xb0\x08\x9f\xcb\x5e\x9b\x9c\xa1\xa8\x87\xdb\xe1\xea\x8a\x5a\x21\x3a\xe1\xda\xf8\x84\x47\xb1\x38\xee\xab\x26\x3f\x61\xb3\xc1\xdf\x65\x09\x5d\xca\x87\x54\xc7\xac\xa6\x44\x8d\xb7\xb3\xa9\xff\x02\x00\x00\xff\xff\x37\x00\x91\x4b\x4d\x02\x00\x00")

func clientScriptsKeygenShBytes() ([]byte, error) {
	return bindataRead(
		_clientScriptsKeygenSh,
		"client/scripts/keygen.sh",
	)
}

func clientScriptsKeygenSh() (*asset, error) {
	bytes, err := clientScriptsKeygenShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "client/scripts/keygen.sh", size: 589, mode: os.FileMode(493), modTime: time.Unix(1528351521, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clientScriptsTokenSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xcf\x41\x4b\xfb\x40\x10\x05\xf0\xfb\x7e\x8a\xf7\xa7\xfd\xd3\x53\xb2\xf7\x42\x0e\x45\x82\x29\xd6\x46\x8c\xe2\x45\x08\xdb\x64\x6c\x42\xcc\x6c\x9c\xd9\x55\xfc\xf6\x12\x4d\xf5\x38\xf3\x9b\x79\xf0\x56\xff\xec\xa9\x67\xab\x9d\x31\x4a\x01\x09\x19\xb3\xc2\xa3\x92\xc0\xc9\x39\x8e\xc4\x21\x35\xf7\xf9\x21\xdf\x55\x79\xf6\x5f\x67\xbc\x26\x26\x71\x81\xe0\xd0\x3a\x1a\x3d\x23\xf8\x81\x18\x51\x7b\x3e\xe3\xea\xb0\xc7\x8b\x17\xec\xee\xf6\x10\x7a\x8b\xa4\x41\x53\xa3\xb1\xf5\x68\x7d\x33\x90\x40\x22\x23\x49\x64\xc4\xb3\x01\x80\xe4\x1d\xeb\xa2\xbc\xcd\xb7\xd6\x4d\x93\xed\xbc\x86\x0b\x10\xaa\xaa\xa8\x6f\x8e\xe5\xd3\xb1\x2e\xca\xea\xa1\xca\x36\xbf\x37\x36\x55\xed\xec\xc0\xfe\x83\xeb\x79\xd6\xcd\xdf\xd7\x9c\x96\x7d\x67\x5e\x76\x09\x71\x90\xcf\xc9\xf7\x1c\xb2\x9e\x49\x42\xef\xda\xc5\xe2\xa9\x79\x75\x91\x9b\x6e\x72\xad\x5d\x6c\xbb\x5e\x1a\xff\x34\x33\x5f\x01\x00\x00\xff\xff\xb8\x50\x60\x94\x24\x01\x00\x00")

func clientScriptsTokenShBytes() ([]byte, error) {
	return bindataRead(
		_clientScriptsTokenSh,
		"client/scripts/token.sh",
	)
}

func clientScriptsTokenSh() (*asset, error) {
	bytes, err := clientScriptsTokenShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "client/scripts/token.sh", size: 292, mode: os.FileMode(493), modTime: time.Unix(1528351521, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"client/scripts/daemon-down.sh": clientScriptsDaemonDownSh,
	"client/scripts/daemon-up.sh": clientScriptsDaemonUpSh,
	"client/scripts/docker.sh": clientScriptsDockerSh,
	"client/scripts/keygen.sh": clientScriptsKeygenSh,
	"client/scripts/token.sh": clientScriptsTokenSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"client": &bintree{nil, map[string]*bintree{
		"scripts": &bintree{nil, map[string]*bintree{
			"daemon-down.sh": &bintree{clientScriptsDaemonDownSh, map[string]*bintree{}},
			"daemon-up.sh": &bintree{clientScriptsDaemonUpSh, map[string]*bintree{}},
			"docker.sh": &bintree{clientScriptsDockerSh, map[string]*bintree{}},
			"keygen.sh": &bintree{clientScriptsKeygenSh, map[string]*bintree{}},
			"token.sh": &bintree{clientScriptsTokenSh, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

